#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDB")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertContact(Contact instance);
  partial void UpdateContact(Contact instance);
  partial void DeleteContact(Contact instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TestDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<Contact> Contacts
	{
		get
		{
			return this.GetTable<Contact>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentId;
	
	private string _DepartmentCode;
	
	private string _DepartmentName;
	
	private System.Nullable<int> _CMarksSF;
	
	private int _CmarksMerit;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentCodeChanging(string value);
    partial void OnDepartmentCodeChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnCMarksSFChanging(System.Nullable<int> value);
    partial void OnCMarksSFChanged();
    partial void OnCmarksMeritChanging(int value);
    partial void OnCmarksMeritChanged();
    #endregion
	
	public Department()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DepartmentId
	{
		get
		{
			return this._DepartmentId;
		}
		set
		{
			if ((this._DepartmentId != value))
			{
				this.OnDepartmentIdChanging(value);
				this.SendPropertyChanging();
				this._DepartmentId = value;
				this.SendPropertyChanged("DepartmentId");
				this.OnDepartmentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentCode", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string DepartmentCode
	{
		get
		{
			return this._DepartmentCode;
		}
		set
		{
			if ((this._DepartmentCode != value))
			{
				this.OnDepartmentCodeChanging(value);
				this.SendPropertyChanging();
				this._DepartmentCode = value;
				this.SendPropertyChanged("DepartmentCode");
				this.OnDepartmentCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NChar(100) NOT NULL", CanBeNull=false)]
	public string DepartmentName
	{
		get
		{
			return this._DepartmentName;
		}
		set
		{
			if ((this._DepartmentName != value))
			{
				this.OnDepartmentNameChanging(value);
				this.SendPropertyChanging();
				this._DepartmentName = value;
				this.SendPropertyChanged("DepartmentName");
				this.OnDepartmentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMarksSF", DbType="Int")]
	public System.Nullable<int> CMarksSF
	{
		get
		{
			return this._CMarksSF;
		}
		set
		{
			if ((this._CMarksSF != value))
			{
				this.OnCMarksSFChanging(value);
				this.SendPropertyChanging();
				this._CMarksSF = value;
				this.SendPropertyChanged("CMarksSF");
				this.OnCMarksSFChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmarksMerit", DbType="Int NOT NULL")]
	public int CmarksMerit
	{
		get
		{
			return this._CmarksMerit;
		}
		set
		{
			if ((this._CmarksMerit != value))
			{
				this.OnCmarksMeritChanging(value);
				this.SendPropertyChanging();
				this._CmarksMerit = value;
				this.SendPropertyChanged("CmarksMerit");
				this.OnCmarksMeritChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Email;
	
	private string _Message;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
	
	public Contact()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Message
	{
		get
		{
			return this._Message;
		}
		set
		{
			if ((this._Message != value))
			{
				this.OnMessageChanging(value);
				this.SendPropertyChanging();
				this._Message = value;
				this.SendPropertyChanged("Message");
				this.OnMessageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UID;
	
	private string _USERNAME;
	
	private string _PASSWORD;
	
	private string _RIGHTS;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnUSERNAMEChanging(string value);
    partial void OnUSERNAMEChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    partial void OnRIGHTSChanging(string value);
    partial void OnRIGHTSChanged();
    #endregion
	
	public User()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UID
	{
		get
		{
			return this._UID;
		}
		set
		{
			if ((this._UID != value))
			{
				this.OnUIDChanging(value);
				this.SendPropertyChanging();
				this._UID = value;
				this.SendPropertyChanged("UID");
				this.OnUIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERNAME", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string USERNAME
	{
		get
		{
			return this._USERNAME;
		}
		set
		{
			if ((this._USERNAME != value))
			{
				this.OnUSERNAMEChanging(value);
				this.SendPropertyChanging();
				this._USERNAME = value;
				this.SendPropertyChanged("USERNAME");
				this.OnUSERNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PASSWORD
	{
		get
		{
			return this._PASSWORD;
		}
		set
		{
			if ((this._PASSWORD != value))
			{
				this.OnPASSWORDChanging(value);
				this.SendPropertyChanging();
				this._PASSWORD = value;
				this.SendPropertyChanged("PASSWORD");
				this.OnPASSWORDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RIGHTS", DbType="Char(10) NOT NULL", CanBeNull=false)]
	public string RIGHTS
	{
		get
		{
			return this._RIGHTS;
		}
		set
		{
			if ((this._RIGHTS != value))
			{
				this.OnRIGHTSChanging(value);
				this.SendPropertyChanging();
				this._RIGHTS = value;
				this.SendPropertyChanged("RIGHTS");
				this.OnRIGHTSChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
